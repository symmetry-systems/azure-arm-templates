{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "location": {
        "type": "string",
        "defaultValue": "EastUs",
        "metadata": {
          "description": "List of available regions for the resource type are: 'westus,eastus,northeurope,westeurope,eastasia,southeastasia,northcentralus,southcentralus,centralus,eastus2,japaneast,japanwest,brazilsouth,australiaeast,australiasoutheast,centralindia,southindia,westindia,canadacentral,canadaeast,westcentralus,westus2,ukwest,uksouth,koreacentral,koreasouth,francecentral,australiacentral,southafricanorth,uaenorth,switzerlandnorth,germanywestcentral,norwayeast,westus3,jioindiawest,swedencentral,qatarcentral."
        }
      },
      "bastionAdminPublicKey": {
        "type": "string",
        "metadata": {
          "description": "Specifies the Bastion VM SSH rsa public key file as a string. Use \"ssh-keygen -t rsa -b 2048\" to generate your SSH key pairs."
        }
      },
      "analysisAdminPublicKey": {
        "type": "string",
        "metadata": {
          "description": "Specifies the Analysis VM SSH rsa public key file as a string. Use \"ssh-keygen -t rsa -b 2048\" to generate your SSH key pairs."
        }
      }
    },
    "variables": {
      "vnetName": "dataguard-vnet",
      "storageAccountName": "[format('store{0}', uniqueString(resourceGroup().id))]",
      "bastionName": "dataguard-bastion-vm",
      "bastionNetworkInterfaceName": "dg-public-nic",
      "bastionNetworkSecurityGroupName": "[concat(variables('bastionName'), '-', 'nsg')]",
      "bastionPublicIpAddressName": "[concat(variables('bastionName'), '-', 'ip')]",
      "bastionSize": "Standard_B2s",
      "analysisName": "dataguard-analysis-vm",
      "analysisNetworkInterfaceName": "dg-private-nic",
      "analysisNetworkSecurityGroupName": "[concat(variables('analysisName'), '-', 'nsg')]",
      "analysisPublicIpAddressName": "[concat(variables('analysisName'), '-', 'ip')]",
      "analysisSize": "Standard_D16as_v5",
      "vaultName": "[concat('dg',uniqueString(resourceGroup().id))]"
    },
    "resources": [
      {
        "name": "[variables('vnetName')]",
        "type": "Microsoft.Network/VirtualNetworks",
        "apiVersion": "2021-01-01",
        "location": "[parameters('location')]",
        "tags": {},
        "properties": {
          "addressSpace": {
            "addressPrefixes": [
              "10.10.0.0/16"
            ]
          },
          "subnets": [
            {
              "name": "default",
              "properties": {
                "addressPrefix": "10.10.0.0/24",
                "privateEndpointNetworkPolicies": "Disabled"
              }
            },
            {
              "name": "public-subnet",
              "properties": {
                "addressPrefix": "10.10.1.0/24",
                "privateEndpointNetworkPolicies": "Disabled"
              }
            },
            {
              "name": "private-subnet",
              "properties": {
                "addressPrefix": "10.10.2.0/24",
                "serviceEndpoints": [
                  {
                    "service": "Microsoft.Storage.Global"
                  },
                  {
                    "service": "Microsoft.AzureCosmosDB"
                  },
                  {
                    "service": "Microsoft.Sql"
                  },
                  {
                    "service": "Microsoft.KeyVault"
                  }
                ],
                "privateEndpointNetworkPolicies": "Disabled",
                "natGateway": {
                  "id": "[resourceId('Microsoft.Network/natGateways', 'dataguard-nat')]"
                }
              }
            }
          ]
        },
        "dependsOn": [
          "[resourceId('Microsoft.Network/natGateways', 'dataguard-nat')]"
        ]
      },
      {
        "type": "Microsoft.Network/natGateways",
        "apiVersion": "2021-05-01",
        "name": "dataguard-nat",
        "location": "[parameters('location')]",
        "sku": {
          "name": "Standard"
        },
        "properties": {
          "idleTimeoutInMinutes": 4,
          "publicIpAddresses": [
            {
              "id": "[resourceId('Microsoft.Network/publicIPAddresses', 'dataguard-nat-public-ip')]"
            }
          ]
        },
        "dependsOn": [
          "[resourceId('Microsoft.Network/publicIPAddresses', 'dataguard-nat-public-ip')]"
        ]
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2021-05-01",
        "name": "dataguard-nat-public-ip",
        "location": "[parameters('location')]",
        "sku": {
          "name": "Standard"
        },
        "properties": {
          "publicIPAddressVersion": "IPv4",
          "publicIPAllocationMethod": "Static",
          "idleTimeoutInMinutes": 4
        }
      },
      {
        "name": "[variables('storageAccountName')]",
        "type": "Microsoft.Storage/storageAccounts",
        "apiVersion": "2021-08-01",
        "location": "[parameters('location')]",
        "properties": {
          "accessTier": "Hot",
          "minimumTlsVersion": "TLS1_2",
          "supportsHttpsTrafficOnly": true,
          "allowBlobPublicAccess": true,
          "allowSharedKeyAccess": true,
          "allowCrossTenantReplication": true,
          "defaultToOAuthAuthentication": true,
          "networkAcls": {
            "bypass": "AzureServices",
            "virtualNetworkRules": [
              {
                "id": "[resourceId('Microsoft.Network/VirtualNetworks/subnets', variables('vnetName'),'private-subnet')]",
                "action": "Allow",
                "state": "Succeeded"
              }
            ],
            "defaultAction": "Deny",
            "ipRules": []
          },
          "isHnsEnabled": false,
          "isSftpEnabled": false,
          "encryption": {
            "keySource": "Microsoft.Storage",
            "services": {
              "blob": {
                "enabled": true
              },
              "file": {
                "enabled": true
              },
              "table": {
                "enabled": true
              },
              "queue": {
                "enabled": true
              }
            },
            "requireInfrastructureEncryption": false
          }
        },
        "dependsOn": [
          "[resourceId('Microsoft.Network/VirtualNetworks', variables('vnetName'))]"
        ],
        "sku": {
          "name": "Standard_RAGRS"
        },
        "kind": "StorageV2",
        "tags": {}
      },
      {
        "name": "[concat(variables('storageAccountName'), '/default')]",
        "type": "Microsoft.Storage/storageAccounts/blobServices",
        "apiVersion": "2021-08-01",
        "properties": {
          "deleteRetentionPolicy": {
            "enabled": true,
            "days": 7
          },
          "containerDeleteRetentionPolicy": {
            "enabled": true,
            "days": 7
          }
        },
        "dependsOn": [
          "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]"
        ]
      },
      {
        "name": "[concat(variables('storageAccountName'), '/default')]",
        "type": "Microsoft.Storage/storageAccounts/fileservices",
        "apiVersion": "2021-08-01",
        "properties": {
          "shareDeleteRetentionPolicy": {
            "enabled": true,
            "days": 7
          }
        },
        "dependsOn": [
          "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[concat(concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), '/blobServices/default')]"
        ]
      },
      {
        "name": "[variables('bastionNetworkInterfaceName')]",
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2021-03-01",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "[concat('Microsoft.Network/networkSecurityGroups/', variables('bastionNetworkSecurityGroupName'))]",
          "[concat('Microsoft.Network/publicIpAddresses/', variables('bastionPublicIpAddressName'))]",
          "[resourceId('Microsoft.Network/VirtualNetworks', variables('vnetName'))]"
        ],
        "properties": {
          "ipConfigurations": [
            {
              "name": "ipconfiguration",
              "properties": {
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), 'public-subnet')]"
                },
                "privateIPAllocationMethod": "Dynamic",
                "publicIpAddress": {
                  "id": "[resourceId(resourceGroup().name, 'Microsoft.Network/publicIpAddresses', variables('bastionPublicIpAddressName'))]"
                }
              }
            }
          ],
          "networkSecurityGroup": {
            "id": "[resourceId(resourceGroup().name, 'Microsoft.Network/networkSecurityGroups', variables('bastionNetworkSecurityGroupName'))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/networkSecurityGroups",
        "apiVersion": "2020-11-01",
        "name": "[variables('bastionNetworkSecurityGroupName')]",
        "location": "eastus",
        "properties": {
          "securityRules": [
            {
              "name": "SSH",
              "properties": {
                "protocol": "TCP",
                "sourcePortRange": "*",
                "destinationPortRange": "22",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 300,
                "direction": "Inbound",
                "sourcePortRanges": [],
                "destinationPortRanges": [],
                "sourceAddressPrefixes": [],
                "destinationAddressPrefixes": []
              }
            }
          ]
        },
        "dependsOn": [
          "[resourceId('Microsoft.Network/VirtualNetworks', variables('vnetName'))]"
        ]
      },
      {
        "type": "Microsoft.Network/networkSecurityGroups/securityRules",
        "apiVersion": "2020-11-01",
        "name": "[concat(variables('bastionNetworkSecurityGroupName'), '/SSH')]",
        "dependsOn": [
          "[resourceId('Microsoft.Network/networkSecurityGroups', variables('bastionNetworkSecurityGroupName'))]"
        ],
        "properties": {
          "protocol": "TCP",
          "sourcePortRange": "*",
          "destinationPortRange": "22",
          "sourceAddressPrefix": "*",
          "destinationAddressPrefix": "*",
          "access": "Allow",
          "priority": 300,
          "direction": "Inbound",
          "sourcePortRanges": [],
          "destinationPortRanges": [],
          "sourceAddressPrefixes": [],
          "destinationAddressPrefixes": []
        }
      },
      {
        "name": "[variables('bastionPublicIpAddressName')]",
        "type": "Microsoft.Network/publicIpAddresses",
        "apiVersion": "2019-02-01",
        "location": "[resourceGroup().location]",
        "properties": {
          "publicIpAllocationMethod": "Static"
        },
        "sku": {
          "name": "Standard"
        }
      },
      {
        "name": "[variables('bastionName')]",
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2021-07-01",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "[concat('Microsoft.Network/networkInterfaces/', variables('bastionNetworkInterfaceName'))]",
          "[resourceId('Microsoft.Network/VirtualNetworks', variables('vnetName'))]"
        ],
        "properties": {
          "hardwareProfile": {
            "vmSize": "[variables('bastionSize')]"
          },
          "storageProfile": {
            "osDisk": {
              "createOption": "fromImage",
              "managedDisk": {
                "storageAccountType": "Premium_LRS"
              },
              "diskSizeGB": 30
            },
            "imageReference": {
              "publisher": "canonical",
              "offer": "0001-com-ubuntu-server-jammy",
              "sku": "22_04-lts-gen2",
              "version": "latest"
            }
          },
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('bastionNetworkInterfaceName'))]"
              }
            ]
          },
          "osProfile": {
            "computerName": "[variables('bastionName')]",
            "adminUsername": "ubuntu",
            "linuxConfiguration": {
              "disablePasswordAuthentication": true,
              "ssh": {
                "publicKeys": [
                  {
                    "path": "[concat('/home/', 'ubuntu', '/.ssh/authorized_keys')]",
                    "keyData": "[parameters('bastionAdminPublicKey')]"
                  }
                ]
              }
            }
          }
        }
      },
      {
        "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
        "apiVersion": "2018-11-30",
        "location": "[resourceGroup().location]",
        "name": "[concat(variables('analysisName'),'-mi')]"
      },
      {
        "name": "[variables('analysisNetworkInterfaceName')]",
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2021-03-01",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "[concat('Microsoft.Network/networkSecurityGroups/', variables('analysisNetworkSecurityGroupName'))]",
          "[concat('Microsoft.Network/publicIpAddresses/', variables('analysisPublicIpAddressName'))]",
          "[resourceId('Microsoft.Network/VirtualNetworks', variables('vnetName'))]"
        ],
        "properties": {
          "ipConfigurations": [
            {
              "name": "ipconfiguration",
              "properties": {
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('vnetName'), 'private-subnet')]"
                },
                "loadBalancerBackendAddressPools": [
                  {
                    "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', 'dg-lb','dg-backend-pool')]"
                  }
                ],
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "10.10.2.42"
              }
            }
          ],
          "networkSecurityGroup": {
            "id": "[resourceId(resourceGroup().name, 'Microsoft.Network/networkSecurityGroups', variables('analysisNetworkSecurityGroupName'))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/networkSecurityGroups",
        "apiVersion": "2020-11-01",
        "name": "[variables('analysisNetworkSecurityGroupName')]",
        "location": "eastus",
        "properties": {
          "securityRules": [
            {
              "name": "SSH",
              "properties": {
                "protocol": "TCP",
                "sourcePortRange": "*",
                "destinationPortRange": "22",
                "sourceAddressPrefix": "10.0.0.0/8",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 300,
                "direction": "Inbound",
                "sourcePortRanges": [],
                "destinationPortRanges": [],
                "sourceAddressPrefixes": [],
                "destinationAddressPrefixes": []
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkSecurityGroups/securityRules",
        "apiVersion": "2020-11-01",
        "name": "[concat(variables('analysisNetworkSecurityGroupName'), '/SSH')]",
        "dependsOn": [
          "[resourceId('Microsoft.Network/networkSecurityGroups', variables('analysisNetworkSecurityGroupName'))]"
        ],
        "properties": {
          "protocol": "TCP",
          "sourcePortRange": "*",
          "destinationPortRange": "22",
          "sourceAddressPrefix": "10.0.0.0/8",
          "destinationAddressPrefix": "*",
          "access": "Allow",
          "priority": 300,
          "direction": "Inbound",
          "sourcePortRanges": [],
          "destinationPortRanges": [],
          "sourceAddressPrefixes": [],
          "destinationAddressPrefixes": []
        }
      },
      {
        "name": "[variables('analysisPublicIpAddressName')]",
        "type": "Microsoft.Network/publicIpAddresses",
        "apiVersion": "2019-02-01",
        "location": "[resourceGroup().location]",
        "properties": {
          "publicIpAllocationMethod": "Dynamic"
        },
        "sku": {
          "name": "Basic"
        }
      },
      {
        "name": "[variables('analysisName')]",
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2021-07-01",
        "location": "[resourceGroup().location]",
        "identity": {
          "type": "UserAssigned",
          "userAssignedIdentities": {
            "[resourceID('Microsoft.ManagedIdentity/userAssignedIdentities/',concat(variables('analysisName'),'-mi'))]": {}
          }
        },
        "dependsOn": [
          "[concat('Microsoft.Network/networkInterfaces/', variables('analysisNetworkInterfaceName'))]",
          "[resourceId('Microsoft.Network/VirtualNetworks', variables('vnetName'))]"
        ],
        "properties": {
          "hardwareProfile": {
            "vmSize": "[variables('analysisSize')]"
          },
          "storageProfile": {
            "osDisk": {
              "createOption": "fromImage",
              "managedDisk": {
                "storageAccountType": "Premium_LRS"
              },
              "diskSizeGB": 2048
            },
            "imageReference": {
              "publisher": "canonical",
              "offer": "0001-com-ubuntu-server-jammy",
              "sku": "22_04-lts-gen2",
              "version": "latest"
            }
          },
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('analysisNetworkInterfaceName'))]"
              }
            ]
          },
          "osProfile": {
            "computerName": "[variables('analysisName')]",
            "adminUsername": "ubuntu",
            "linuxConfiguration": {
              "disablePasswordAuthentication": true,
              "ssh": {
                "publicKeys": [
                  {
                    "path": "[concat('/home/', 'ubuntu', '/.ssh/authorized_keys')]",
                    "keyData": "[parameters('analysisAdminPublicKey')]"
                  }
                ]
              }
            }
          }
        }
      },
      {
        "type": "Microsoft.KeyVault/vaults",
        "apiVersion": "2022-07-01",
        "dependsOn": [
          "[resourceID('Microsoft.ManagedIdentity/userAssignedIdentities/',concat(variables('analysisName'),'-mi'))]",
          "[resourceId('Microsoft.Network/VirtualNetworks', variables('vnetName'))]"
        ],
        "name": "[variables('vaultName')]",
        "location": "[resourceGroup().location]",
        "properties": {
          "accessPolicies": [
            {
              "objectId": "[reference(resourceID('Microsoft.ManagedIdentity/userAssignedIdentities/',concat(variables('analysisName'),'-mi'))).principalId]",
              "permissions": {
                "certificates": [
                  "Get"
                ],
                "keys": [
                  "Get"
                ],
                "secrets": ["Get", "Set", "Delete", "Purge", "Recover", "Backup", "Restore"
                ],
                "storage": [
                  "Get"
                ]
              },
              "tenantId": "[subscription().tenantId]"
            }
          ],
          "createMode": "default",
          "enabledForDeployment": false,
          "enabledForDiskEncryption": false,
          "enabledForTemplateDeployment": false,
          "enableRbacAuthorization": false,
          "enableSoftDelete": false,
          "networkAcls": {
            "bypass": "None",
            "defaultAction": "Deny",
            "ipRules": [],
            "virtualNetworkRules": [
              {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), 'private-subnet')]"
              }
            ]
          },
          "publicNetworkAccess": "enabled",
          "sku": {
            "family": "A",
            "name": "Standard"
          },
          "tenantId": "[subscription().tenantId]"
        }
      },
      {
        "type": "Microsoft.Network/loadBalancers",
        "apiVersion": "2022-09-01",
        "name": "dg-lb",
        "location": "[parameters('location')]",
        "sku": {
          "name": "Standard"
        },
        "properties": {
          "backendAddressPools": [
            {
              "name": "dg-backend-pool"
              }
          ],
          "loadBalancingRules": [
            {
              "name": "dg-lb-rule",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', 'dg-lb','dg-ip-conf')]"
                },
                "backendAddressPool": {
                  "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', 'dg-lb','dg-backend-pool')]"
                },
                "probe": {
                  "id": "[resourceId('Microsoft.Network/loadBalancers/probes', 'dg-lb','dg-https-probe')]"
                },
                "protocol": "Tcp",
                "frontendPort": 443,
                "backendPort": 443,
                "idleTimeoutInMinutes": 4,
                "enableFloatingIP": false,
                "disableOutboundSnat": true,
                "loadDistribution": "Default"
              }
            }
          ],
          "probes": [
            {
              "name": "dg-https-probe",
              "properties": {
                "protocol": "Https",
                "port": 443,
                "requestPath": "/",
                "intervalInSeconds": 15,
                "numberOfProbes": 2
              }
            }
          ],
          "frontendIPConfigurations": [
            {
              "name": "dg-ip-conf",
              "properties": {
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses', 'dg-lb-ip')]"
                }
              }
            }
          ]
        },
        "dependsOn": [
          "[resourceId('Microsoft.Network/publicIPAddresses', 'dg-lb-ip')]"
        ],
        "resources": [
        ]
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2022-09-01",
        "name": "dg-lb-ip",
        "location": "[parameters('location')]",
        "sku": {
          "name": "Standard"
        },
        "properties": {
          "publicIPAddressVersion": "IPv4",
          "publicIPAllocationMethod": "Static"
        }
      }
    ],
    "outputs": {
      "storageAccountId": {
        "type": "string",
        "value": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      },
      "privateSubnetId": {
        "type": "string",
        "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), 'private-subnet')]"
      },
      "vaultName": {
        "type": "string",
        "value": "[resourceID('Microsoft.KeyVault/vaults/',variables('vaultName'))]"
      },
      "bastionPublicIP": {
        "type": "string",
        "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', 'dataguard-nat-public-ip')).IpAddress]"
      }
    }
}